<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gis on INBO Tutorials</title>
    <link>https://inbo.github.io/tutorials/tags/gis/</link>
    <description>Recent content in gis on INBO Tutorials</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://inbo.github.io/tutorials/tags/gis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Goodbye PROJ.4 strings! How to specify a coordinate reference system in R?</title>
      <link>https://inbo.github.io/tutorials/tutorials/spatial_crs_coding/</link>
      <pubDate>Fri, 18 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/spatial_crs_coding/</guid>
      <description>Coordinate reference systems: minimal background What? A coordinate reference system (CRS) – also called spatial reference system (SRS) – is what you need if you want to interpret numeric coordinates as actual point locations with reference to the Earth. Two types of coordinate reference system exist: geodetic and projected CRSes. The former serve only to locate coordinates relative to a 3D model of the Earth surface, while the latter add a projection to generate coordinates on a 2D map.</description>
    </item>
    
    <item>
      <title>Using WFS service in R</title>
      <link>https://inbo.github.io/tutorials/tutorials/spatial_wfs_services/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/spatial_wfs_services/</guid>
      <description>What is WFS? In computing, the Open Geospatial Consortium (OGC) Web Feature Service (WFS) Interface Standard provides an interface allowing requests for geographical features across the web using platform-independent calls. One can think of geographical features as the “source code” behind a map, whereas the Web Mapping Service (WMS) interface or online tiled mapping portals like Google Maps return only an image, which end-users cannot edit or spatially analyze.
The standard output format for reading or downloading data from a WFS is the XML-based Geography Markup Language (GML), but other formats like shapefiles or geojson are also available.</description>
    </item>
    
    <item>
      <title>How to use open raster file formats in R: GeoTIFF &amp; GeoPackage</title>
      <link>https://inbo.github.io/tutorials/tutorials/spatial_standards_raster/</link>
      <pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/spatial_standards_raster/</guid>
      <description>This tutorial uses a few basic functions from the dplyr and raster packages. While only a few functions are used, you can use the previous hyperlinks to access the tutorials (vignettes) of these packages for more functions and information.
options(stringsAsFactors = FALSE) library(raster) library(tidyverse) library(inborutils) You will find a bit more background about ‘why and what’, regarding the considered open standards, in a separate post on this website.
In short, the GeoTIFF and GeoPackage formats are ideal for exchange, publication, interoperability &amp;amp; durability and to open science in general.</description>
    </item>
    
    <item>
      <title>How to use open vector file formats in R: GeoPackage &amp; GeoJSON</title>
      <link>https://inbo.github.io/tutorials/tutorials/spatial_standards_vector/</link>
      <pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/spatial_standards_vector/</guid>
      <description>This tutorial uses a few basic functions from the dplyr and sf packages. While only a few functions are used, you can use the previous hyperlinks to access the tutorials (vignettes) of these packages for more functions and information.
options(stringsAsFactors = FALSE) library(tidyverse) library(sf) library(inborutils) You will find a bit more background about ‘why and what’, regarding the considered open standards, in a separate post on this website.
In short, the GeoPackage and GeoJSON formats are ideal for exchange, publication, interoperability &amp;amp; durability and to open science in general.</description>
    </item>
    
    <item>
      <title>Meet some popular open geospatial standards!</title>
      <link>https://inbo.github.io/tutorials/articles/geospatial_standards/</link>
      <pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/articles/geospatial_standards/</guid>
      <description>Some inspiration for this post came from the beautiful books of Lovelace et al. (2020), Pebesma &amp;amp; Bivand (2019) and Hijmans (2019), and from various websites.
Why use open standards?  Open file standards ease collaboration, portability and compatibility between users, machines and applications. Their (file) structure is fully documented.  Consequently, scientists and programmers can build new software / packages and make innovations that use these standards, while maintaining interoperability with existing applications.</description>
    </item>
    
    <item>
      <title>How to make spatial joins (point in polygon)?</title>
      <link>https://inbo.github.io/tutorials/tutorials/spatial_point_in_polygon/</link>
      <pubDate>Thu, 20 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/spatial_point_in_polygon/</guid>
      <description>library(R.utils) library(rgdal) library(tidyverse) library(leaflet) library(sp) library(sf) library(rgbif) library(DBI) What we want to do In this short tutorial, we explore various options to deal with the situation where we have (1) a spatially referenced GIS file with polygons and (2) a spatially referenced set of points that overlaps with the GIS polygons.
Typically, both data sources contain information (apart from the spatial locations) that needs to be related to each other in some way.</description>
    </item>
    
    <item>
      <title>Let&#39;s create an interactive map!</title>
      <link>https://inbo.github.io/tutorials/tutorials/spatial_create_leaflet_map/</link>
      <pubDate>Thu, 14 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/spatial_create_leaflet_map/</guid>
      <description>Introduction The required packages are leaflet and sp.
library(leaflet) library(sp) Dummy data Let&#39;s create a dumy data.frame to play around, i.e. the three locations of INBO:
names &amp;lt;- c(&amp;#34;VAC HT&amp;#34;,&amp;#34;Geraardsbergen&amp;#34;,&amp;#34;Linkebeek&amp;#34;) lat &amp;lt;- c(50.865664, 50.760201, 50.767950) lon &amp;lt;- c(4.349944, 3.874300, 4.333044) data &amp;lt;- data.frame(names,lat,lon) We created three points:
plot(data$lon, data$lat) Creating a map We need to convert the data.frame to a SpatialPointsDataFrame:
crs_wgs84 &amp;lt;- CRS(&amp;#34;+init=epsg:4326&amp;#34;) pts &amp;lt;- SpatialPointsDataFrame(data[c(&amp;#34;lon&amp;#34;,&amp;#34;lat&amp;#34;)], data[!(names(data) %in% c(&amp;#34;lon&amp;#34;,&amp;#34;lat&amp;#34;))], proj4string = crs_wgs84) The leaflet package is ideal to create a basic interactive map:</description>
    </item>
    
    <item>
      <title>Transforming spatial objects</title>
      <link>https://inbo.github.io/tutorials/tutorials/spatial_transform_crs/</link>
      <pubDate>Mon, 19 Feb 2018 14:52:22 +0100</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/spatial_transform_crs/</guid>
      <description>Sometimes we have a layer in one coordinate reference system (CRS) and need to transform it into another coordinate reference system. The first thing we need to do is identifying both coordinate reference systems. Let&#39;s create an example and identify the coordinate reference system with proj4string(). We used the coordinates posted on the contact page of NGI.
library(sp) library(leaflet) library(widgetframe) ## Loading required package: htmlwidgets  ngi &amp;lt;- data.frame(x = 650381.</description>
    </item>
    
    <item>
      <title>Using WMS service in R</title>
      <link>https://inbo.github.io/tutorials/tutorials/spatial_wms_services/</link>
      <pubDate>Mon, 19 Feb 2018 12:09:22 +0100</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/spatial_wms_services/</guid>
      <description>WMS stands for Web Map Service. The service provides prerendered tiles at different scales. This makes it useful to include them as background images in maps.
wms_grb links to the WMS of the GRB-basiskaart, the Flemish cadastral map. It depicts land parcels, buildings, watercourses, roads and railroads.
wms_ortho contains a mosaic of recent orthophotos made during the winter. The layer Ortho contains the images, the layer Vliegdagcontour detail on the time when the pictures were taken.</description>
    </item>
    
  </channel>
</rss>