<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on INBO Tutorials</title>
    <link>https://inbo.github.io/tutorials/tutorials/</link>
    <description>Recent content in Tutorials on INBO Tutorials</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://inbo.github.io/tutorials/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mixed model formulation of a paired t-test</title>
      <link>https://inbo.github.io/tutorials/tutorials/r_paired_t_test/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/r_paired_t_test/</guid>
      <description>What you will learn In this tutorial we explain the analogy between the paired t-test and the corresponding mixed model formulation.
Used packages library(knitr) library(lme4) library(tidyr) library(broom) library(DHARMa) Data  plot: identifies paired measurements response: measurement values treatment: identifies two treatments (a and b)  set.seed(124) paired_data &amp;lt;- data.frame( plot = rep(1:10, 2), response = c(rnorm(10), rnorm(10, 3, 1.5)), treatment = rep(c(&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;), each = 10) ) paired_data$treatment &amp;lt;- as.factor(paired_data$treatment) paired_data$plot &amp;lt;- as.</description>
    </item>
    
    <item>
      <title>Same variable in fixed and random effects</title>
      <link>https://inbo.github.io/tutorials/tutorials/r_fixed_random/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/r_fixed_random/</guid>
      <description>Used packages library(ggplot2) ## Warning: package &#39;ggplot2&#39; was built under R version 4.0.2  library(lme4) ## Loading required package: Matrix  Dummy data For the sake of this demontration we use a very simple dataset with a very high signal versus noise ratio. Let’s look at a simple timeseries with multiple observations per timepoint.
n.year &amp;lt;- 30 n.replicate &amp;lt;- 10 sd.noise &amp;lt;- 0.1 dataset &amp;lt;- expand.grid( Replicate = seq_len(n.replicate), Year = seq_len(n.</description>
    </item>
    
    <item>
      <title>Styleguide SQL-scripts</title>
      <link>https://inbo.github.io/tutorials/tutorials/sql_styleguide/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/sql_styleguide/</guid>
      <description>SQL is a standard language for storing, manipulating and retrieving data in databases. This is not a SQL-course but a styleguide, describing how to enhance the readability of your SQL-scripts. Focus of the styleguide is on scripts for retrieving data.
In short  --This is how a basic SQL-script should look like /** Description: Lijst met broedvogels per UTM1-hok sinds 2010 Created: 2015-08-12 Created by: Frederic Piesschaert **/ SELECT w.WRNG_JAR AS jaar , w.</description>
    </item>
    
    <item>
      <title>Using WFS service in R</title>
      <link>https://inbo.github.io/tutorials/tutorials/spatial_wfs_services/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/spatial_wfs_services/</guid>
      <description>What is WFS? In computing, the Open Geospatial Consortium (OGC) Web Feature Service (WFS) Interface Standard provides an interface allowing requests for geographical features across the web using platform-independent calls. One can think of geographical features as the “source code” behind a map, whereas the Web Mapping Service (WMS) interface or online tiled mapping portals like Google Maps return only an image, which end-users cannot edit or spatially analyze.
The standard output format for reading or downloading data from a WFS is the XML-based Geography Markup Language (GML), but other formats like shapefiles or geojson are also available.</description>
    </item>
    
    <item>
      <title>Styleguide new git repositories</title>
      <link>https://inbo.github.io/tutorials/tutorials/styleguide_repos/</link>
      <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/styleguide_repos/</guid>
      <description>Naming   Use lowercase for repository, directory, and file names. For R-related files, use uppercase R.
 https://github.com/inbo/data-publication ../tutorials/gis/leaflet-R.Rmd    Use dash (-) to separate words in directory and file names. Don&#39;t use underscores.
 .../datasets/bird-tracking-gull-occurrences/mapping/dwc-occurrence.sql    Avoid the use of dash (-) in the name of repositories that you intend for R package development (it is OK to use a dash in repository names for other purposes).</description>
    </item>
    
    <item>
      <title>Tutorial on how to retrieve data from the INBOVEG database</title>
      <link>https://inbo.github.io/tutorials/tutorials/r_inboveg/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/r_inboveg/</guid>
      <description>Introduction The Flemish vegetation database, INBOVEG, is an application developed to provide a repository of relevés and makes the relevés available for future use.
INBOVEG supports different types of recordings: BioHab recordings (protocol of Natura 2000 monitoring) and the classic relevés. The classic relevés can stand alone, be an element of a collection or element of a chain where the linkage is used to give information about the relative position of recording within a series.</description>
    </item>
    
    <item>
      <title>How to use open raster file formats in R: GeoTIFF &amp; GeoPackage</title>
      <link>https://inbo.github.io/tutorials/tutorials/spatial_standards_raster/</link>
      <pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/spatial_standards_raster/</guid>
      <description>This tutorial uses a few basic functions from the dplyr and raster packages. While only a few functions are used, you can use the previous hyperlinks to access the tutorials (vignettes) of these packages for more functions and information.
options(stringsAsFactors = FALSE) library(raster) library(tidyverse) library(inborutils) You will find a bit more background about ‘why and what’, regarding the considered open standards, in a separate post on this website.
In short, the GeoTIFF and GeoPackage formats are ideal for exchange, publication, interoperability &amp;amp; durability and to open science in general.</description>
    </item>
    
    <item>
      <title>How to use open vector file formats in R: GeoPackage &amp; GeoJSON</title>
      <link>https://inbo.github.io/tutorials/tutorials/spatial_standards_vector/</link>
      <pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/spatial_standards_vector/</guid>
      <description>This tutorial uses a few basic functions from the dplyr and sf packages. While only a few functions are used, you can use the previous hyperlinks to access the tutorials (vignettes) of these packages for more functions and information.
options(stringsAsFactors = FALSE) library(tidyverse) library(sf) library(inborutils) You will find a bit more background about ‘why and what’, regarding the considered open standards, in a separate post on this website.
In short, the GeoPackage and GeoJSON formats are ideal for exchange, publication, interoperability &amp;amp; durability and to open science in general.</description>
    </item>
    
    <item>
      <title>Classification and visualisation of estimates and their uncertainty</title>
      <link>https://inbo.github.io/tutorials/tutorials/r_effectclass/</link>
      <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/r_effectclass/</guid>
      <description>Here are the slides of a presentation about the effectclass package.</description>
    </item>
    
    <item>
      <title>Match scientific names with the GBIF Backbone Taxonomy</title>
      <link>https://inbo.github.io/tutorials/tutorials/r_gbif_name_matching/</link>
      <pubDate>Wed, 21 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/r_gbif_name_matching/</guid>
      <description>Introduction This tutorial will explain how you can match a list of scientific names against the GBIF backbone taxonomy.
It is important that you have the most recent version of inborutils installed and available:
remotes::install_github(&amp;#34;inbo/inborutils&amp;#34;) # install inborutils library(tidyverse) # To do datascience library(rgbif) # To lookup names in the GBIF backbone taxonomy library(inborutils) # To wrap GBIF API data library(knitr) Read data file containing the scientific names Read file containing the scientific names you want to check against the GBIF taxonomic backbone:</description>
    </item>
    
    <item>
      <title>How to make spatial joins (point in polygon)?</title>
      <link>https://inbo.github.io/tutorials/tutorials/spatial_point_in_polygon/</link>
      <pubDate>Thu, 20 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/spatial_point_in_polygon/</guid>
      <description>library(R.utils) library(rgdal) library(tidyverse) library(leaflet) library(sp) library(sf) library(rgbif) library(DBI) What we want to do In this short tutorial, we explore various options to deal with the situation where we have (1) a spatially referenced GIS file with polygons and (2) a spatially referenced set of points that overlaps with the GIS polygons.
Typically, both data sources contain information (apart from the spatial locations) that needs to be related to each other in some way.</description>
    </item>
    
    <item>
      <title>Applying the INBO corporate identity to bookdown documents</title>
      <link>https://inbo.github.io/tutorials/tutorials/r_inbomd/</link>
      <pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/r_inbomd/</guid>
      <description>During this workshop you learn how to turn a regular Rmarkdown file into a bookdown document using the INBO corporate identity. A lot of tips and trics use plain bookdown. So you can use them with other bookdown output formats.
The slides are available on the INBOmd examples website.
The source code is avalaible in the INBOmd example GitHub repository.</description>
    </item>
    
    <item>
      <title>R voor beginners</title>
      <link>https://inbo.github.io/tutorials/tutorials/r_beginners/</link>
      <pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/r_beginners/</guid>
      <description>Doel van de cursus Hoe maak je van je ingezamelde gegevens een reproduceerbare analyse, visualisatie en rapportage, gebruik makend van de software R en Rstudio.
 Rstudio kunnen gebruiken (Les 1a) Commando&#39;s uitvoeren vanuit een script (Les 1b) Externe databestanden inlezen in R (Les 2a) Gegevens visualiseren (ggplot2) (Les 2b) Data manipuleren in een gewenste vorm (dplyr) (Les 3) Reproduceerbaar analyserapport maken (Rmarkdown) + algemene vragen (Les 4)  Bovenstaande topics worden gecombineerd in een opleiding van 4 workshops.</description>
    </item>
    
    <item>
      <title>INLA workshops</title>
      <link>https://inbo.github.io/tutorials/tutorials/r_inla/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/r_inla/</guid>
      <description>These workshops are a follow-up of the course on &amp;ldquo;Spatial, temporal and spatial-temporal models using R-INLA&amp;rdquo; by Alain Zuur and Elena Ieno (Highland Statistics Ltd.). The main goal is the get people using R-INLA with their own data in a workshop setting so they can tap into the knowledge of others. The workshops are not a copy of the Highstat course but elaborate certain topics. We also introduce the inlatools and inlabru.</description>
    </item>
    
    <item>
      <title>Git(hub) introduction</title>
      <link>https://inbo.github.io/tutorials/tutorials/git_introduction/</link>
      <pubDate>Thu, 24 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/git_introduction/</guid>
      <description>At INBO, people do write code and require version control. As git is not the most straightforward environment to work with for non-IT specialists, we try to define our own sub-ecosystem with relevant practices and an achievable workflow.
To introduce the concept of version control with Git and Github, a separate git course website is available here.
The git course provides an introduction on main terminology of Git based on 5 important tasks:</description>
    </item>
    
    <item>
      <title>VMM surface waters - quality data</title>
      <link>https://inbo.github.io/tutorials/tutorials/vmm_surface_waters_quality_data/</link>
      <pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/vmm_surface_waters_quality_data/</guid>
      <description>OPGELET: deze databank is alleen raadpleegbaar voor INBO-medewerkers, niet voor externen. Externen kunnen gebruik maken van het VMM-geoloket waterkwaliteit.
Het INBO krijgt jaarlijks een (gedeeltelijke) kopie van de waterkwaliteitsdatabank van de Vlaamse Milieumaatschappij (VMM). De kopie omvat fysicochemische metingen en kwaliteitsindexen uit het VMM-meetnet oppervlaktewaters. Deze en andere waterkwaliteitsgevens zijn rechtstreeks opvraagbaar via het VMM-geoloket waterkwaliteit, maar de lokale kopie laat een veel vlottere raadpleging toe wanneer analyse van een groter aantal meetpunten gewenst is.</description>
    </item>
    
    <item>
      <title>Headers and navigation in R code</title>
      <link>https://inbo.github.io/tutorials/tutorials/r_script_sections/</link>
      <pubDate>Thu, 14 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/r_script_sections/</guid>
      <description>Introduction R code can become elaborate and consequently unclear or difficult to navigate. Yet, it is possible to introduce headers and navigate through them.
Creating sections manually To create a header of a section, different methods can be applied. Any comment line which includes at least four trailing dashes (-), equal signs (=), or hash tags (#) automatically creates a code section.
# 1. Header 1 #### # 2. Header 2 ---- # 3.</description>
    </item>
    
    <item>
      <title>Let&#39;s create an interactive map!</title>
      <link>https://inbo.github.io/tutorials/tutorials/spatial_create_leaflet_map/</link>
      <pubDate>Thu, 14 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/spatial_create_leaflet_map/</guid>
      <description>Introduction The required packages are leaflet and sp.
library(leaflet) library(sp) Dummy data Let&#39;s create a dumy data.frame to play around, i.e. the three locations of INBO:
names &amp;lt;- c(&amp;#34;VAC HT&amp;#34;,&amp;#34;Geraardsbergen&amp;#34;,&amp;#34;Linkebeek&amp;#34;) lat &amp;lt;- c(50.865664, 50.760201, 50.767950) lon &amp;lt;- c(4.349944, 3.874300, 4.333044) data &amp;lt;- data.frame(names,lat,lon) We created three points:
plot(data$lon, data$lat) Creating a map We need to convert the data.frame to a SpatialPointsDataFrame:
crs_wgs84 &amp;lt;- CRS(&amp;#34;+init=epsg:4326&amp;#34;) pts &amp;lt;- SpatialPointsDataFrame(data[c(&amp;#34;lon&amp;#34;,&amp;#34;lat&amp;#34;)], data[!(names(data) %in% c(&amp;#34;lon&amp;#34;,&amp;#34;lat&amp;#34;))], proj4string = crs_wgs84) The leaflet package is ideal to create a basic interactive map:</description>
    </item>
    
    <item>
      <title>Using `%&gt;%` pipes in R</title>
      <link>https://inbo.github.io/tutorials/tutorials/r_tidyverse_piping/</link>
      <pubDate>Thu, 14 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/r_tidyverse_piping/</guid>
      <description>library(dplyr) How to use piping in R Normally, you would do this:
head(mtcars) ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.</description>
    </item>
    
    <item>
      <title>Wercker</title>
      <link>https://inbo.github.io/tutorials/tutorials/development_wercker/</link>
      <pubDate>Fri, 23 Mar 2018 11:23:07 +0100</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/development_wercker/</guid>
      <description>Set up continuous integration with Wercker There are 2 major steps to set up continuous integration:
 create a wercker.yml file in the package add the application (package) to Wercker.com  To be able to add a package to Wercker, one must have administrator rights on the package repository on Github.
The Wercker test environment can only be set up if the file wercker.yml is commited to the repository, but Wercker is triggered to start checking when the application is added to wercker.</description>
    </item>
    
    <item>
      <title>Transforming spatial objects</title>
      <link>https://inbo.github.io/tutorials/tutorials/spatial_transform_crs/</link>
      <pubDate>Mon, 19 Feb 2018 14:52:22 +0100</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/spatial_transform_crs/</guid>
      <description>Sometimes we have a layer in one coordinate reference system (CRS) and need to transform it into another coordinate reference system. The first thing we need to do is identifying both coordinate reference systems. Let&#39;s create an example and identify the coordinate reference system with proj4string(). We used the coordinates posted on the contact page of NGI.
library(sp) library(leaflet) library(widgetframe) ## Loading required package: htmlwidgets  ngi &amp;lt;- data.frame(x = 650381.</description>
    </item>
    
    <item>
      <title>Using WMS service in R</title>
      <link>https://inbo.github.io/tutorials/tutorials/spatial_wms_services/</link>
      <pubDate>Mon, 19 Feb 2018 12:09:22 +0100</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/spatial_wms_services/</guid>
      <description>WMS stands for Web Map Service. The service provides prerendered tiles at different scales. This makes it useful to include them as background images in maps.
wms_grb links to the WMS of the GRB-basiskaart, the Flemish cadastral map. It depicts land parcels, buildings, watercourses, roads and railroads.
wms_ortho contains a mosaic of recent orthophotos made during the winter. The layer Ortho contains the images, the layer Vliegdagcontour detail on the time when the pictures were taken.</description>
    </item>
    
    <item>
      <title>Data wrangling with tidyverse</title>
      <link>https://inbo.github.io/tutorials/tutorials/r_tidyverse_info/</link>
      <pubDate>Fri, 09 Feb 2018 14:14:49 +0100</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/r_tidyverse_info/</guid>
      <description>Real life datasources seldom provide data in exactly the format you need for the analysis. Hence most of the time you need to manipulate the data after reading it into R. There are several ways to do this, each with their pros and cons. We highly recommend the tidyverse collection of packages. The command library(tidyverse) will actually load the following packages: ggplot2, dplyr, tidyr, readr, purrr, tibble, stringr and forecats.</description>
    </item>
    
    <item>
      <title>Styleguide R code</title>
      <link>https://inbo.github.io/tutorials/tutorials/styleguide_r_code/</link>
      <pubDate>Wed, 18 Oct 2017 16:01:34 +0200</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/styleguide_r_code/</guid>
      <description>Scope This style guide is a recommendation for all R code written for the Research Institute for Nature and Forest (INBO). The goal of this style guide is twofold. First of all applying the guidelines will result in readable code. Secondly, it is much easier to work together on code when everyone is using the same guidelines. It is likely that applying these guidelines will have consequences on the current style used by many R users at INBO.</description>
    </item>
    
    <item>
      <title>Undo a git commit</title>
      <link>https://inbo.github.io/tutorials/tutorials/git_undo_commit/</link>
      <pubDate>Wed, 18 Oct 2017 15:31:53 +0200</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/git_undo_commit/</guid>
      <description>Introduction You notice you have done something wrong on your branch. No worries, erroneous commits can be undone or reverted.
First, check your history of commits to see which commits are the faulty ones.
git log --oneline Example output
b7119f2 Continue doing crazy things 872fa7e Try something crazy a1e8fb5 Make some important changes to hello.py 435b61d Create hello.py 9773e52 Initial import Git checkout The git checkout command serves three distinct functions: checking out files, checking out commits, and checking out branches.</description>
    </item>
    
    <item>
      <title>Git without internet</title>
      <link>https://inbo.github.io/tutorials/tutorials/git_no_internet/</link>
      <pubDate>Wed, 18 Oct 2017 15:30:15 +0200</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/git_no_internet/</guid>
      <description>When working off line, two Git tasks cannot be performed: fetching/pulling updates from the server, and pushing changes to the server. All other commands still work.
One can commit changes, branch off, revert and reset changes, the same as when there exists an internet connection.
Example workflow: start offline mode
while(notBored): commit changes add files branch off new features end offline mode
update master branch
git fetch origin push changes to the server</description>
    </item>
    
    <item>
      <title>Git workflow using the command line</title>
      <link>https://inbo.github.io/tutorials/tutorials/git_workflow/</link>
      <pubDate>Wed, 18 Oct 2017 14:42:43 +0200</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/git_workflow/</guid>
      <description>BEFORE I START WORKING   STEP 1: Update the master branch on my PC to make sure it is aligned with the remote master
git fetch origin git checkout master git merge --ff-only origin/master   STEP 2: Choose your option:
  OPTION 2A: I already have a branch I want to continue working on:
Switch to existing topic branch:
git checkout name_existing_branch git fetch origin git rebase origin/master   OPTION 2B: I&#39;ll make a new branch to work with: Create a new topic branch from master(!</description>
    </item>
    
    <item>
      <title>Handle conflicts</title>
      <link>https://inbo.github.io/tutorials/tutorials/git_conflict/</link>
      <pubDate>Wed, 18 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/git_conflict/</guid>
      <description>Fix merge conflict with a pull request You have made some changes to a feature branch. Make a pull request on the server. The standard case of automatic merge is not possible. Push your latest changes from the feature branch to the server.
Locally on your computer:
git fetch origin Rebase your feature branch with your master
git rebase origin/master Git will now state that there are merge conflicts. These will look like this:</description>
    </item>
    
    <item>
      <title>Code coverage</title>
      <link>https://inbo.github.io/tutorials/tutorials/development_codecov/</link>
      <pubDate>Wed, 18 Oct 2017 00:25:24 +0200</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/development_codecov/</guid>
      <description>R CMD check has a large set of generic quality tests on a package. It is impossible to create generic tests that check the content of the package. E.g. does each function return sensible results. However, R CMD check does run a set unit tests. These are small pieces of code written by the package developer which test the output of a specific function under specific circumstances. We highly recommend the testthat framework for writing unit tests.</description>
    </item>
    
    <item>
      <title>Reading large data files in R</title>
      <link>https://inbo.github.io/tutorials/tutorials/r_large_data_files_handling/</link>
      <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/r_large_data_files_handling/</guid>
      <description>Intro R is known to have difficulties handling large data files. Here we will explore some tips that make working with such files in R less painfull.
tl;dr  If you can comfortably work with the entire file in memory, but reading the file is rather slow, consider using the data.table package and read the file with its fread function. If your file does not comfortably fit in memory:  Use sqldf if you have to stick to csv files.</description>
    </item>
    
    <item>
      <title>Read data from INBO databases (SQL Server) with R</title>
      <link>https://inbo.github.io/tutorials/tutorials/r_database_access/</link>
      <pubDate>Fri, 03 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/r_database_access/</guid>
      <description>Connection to INBO database Here we provide the approach using the package DBI, which is also used by RStudio.[1]. This package enables the link between R and the (remote) database. After installation of the needed packages (install.packages(c(&amp;quot;DBI&amp;quot;, &amp;quot;glue&amp;quot;, &amp;quot;tidyverse&amp;quot;))), the packages can be loaded:
library(DBI) library(glue) library(tidyverse) To create a database connection, different approaches are available as explained in the next section:
 Use the dedicated connect_inbo_dbase function in the inbodb package Setup the required parameters yourself Reuse existing registered connections on your computer  Inbodb function To support the connection to INBO databases, a dedicated function is available in the inbodb package, called connect_inbo_dbase.</description>
    </item>
    
    <item>
      <title>Read data from google sheet</title>
      <link>https://inbo.github.io/tutorials/tutorials/r_google_sheets/</link>
      <pubDate>Tue, 03 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/r_google_sheets/</guid>
      <description>library(googlesheets) library(dplyr) library(ggplot2) Setup The R package googlesheets provides the functionality to retrieve data from a google sheet. Once the registration as a user is done and the permissions are granted, it enables to read and write to google sheets. Initiation of the authentification can be done with the gs_auth command.
gs_auth() Google will ask to grant the package the permission to access your drive. This token is saved to in a file .</description>
    </item>
    
  </channel>
</rss>